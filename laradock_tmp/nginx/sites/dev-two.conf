server {
    listen 443 ssl;
    ssl_certificate /var/certs/fullchain1.pem;
    ssl_certificate_key /var/certs/privkey1.pem;

    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Content-Type-Options "nosniff";

    charset utf-8;

    server_name dev.mybestgigolo.com;
    root /var/www/public;
    index index.php index.html index.htm;


    location ~* ^.+\.(jpg|svg|jpeg|gif|png|ico|css|zip|tgz|gz|rar|bz2|pdf|txt|tar|wav|bmp|rtf|js|flv|swf|html|htm)$ {
        gzip on;
        expires 365d;
        root   /var/www/frontend/;
    }

     location / {
        proxy_redirect                      off;
        proxy_set_header Host               $host;
        proxy_set_header X-Real-IP          $remote_addr;
        proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto  $scheme;
        proxy_read_timeout          1m;
        proxy_connect_timeout       1m;
        proxy_pass                  http://pm2:3333; # set the adress of the Node.js instance here
        proxy_cache_bypass $http_upgrade;
        proxy_set_header Connection 'upgrade';
     }

     location /api {
	try_files $uri $uri/ /index.php$is_args$args;
     }

     location /broadcasting {
	try_files $uri $uri/ /index.php$is_args$args;
     }

          location /foreign {
		try_files $uri $uri/ /index.php$is_args$args;
          }

    location ~ \.php$ {
	try_files $uri $uri/ /index.php$is_args$args;
        fastcgi_pass php-upstream;
        fastcgi_index index.php;
        fastcgi_buffers 16 16k;
        fastcgi_buffer_size 32k;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        #fixes timeouts
        fastcgi_read_timeout 600;
        include fastcgi_params;
    }

    location ~ /\.ht {
        deny all;
    }

    location /.well-known/acme-challenge/ {
        root /var/www/letsencrypt/;
        log_not_found off;
    }
}


server {
    listen 80;
    listen [::]:80;
    server_name dev.mybestgigolo.com;
    return 301 https://$host$request_uri;
}
